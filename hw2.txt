;-------Problem 1-------
(defn sequence-to-power [x n]
  (if (= n 0)
    '()
    (concat x (sequence-to-power x (- n 1))))) 

;-------Problem 2--------
(defn in-L? [l]
  (if (empty? l)
    true
    (if (= (first l) 'a)
      (in-L? (rest l))
      false))) 

;-------Problem 3--------
(def add-to-end (fn [l x] 
                  (if (empty? l)
                    (cons x l)
                    (cons(first l) 
                      (add-to-end (rest l) x)))))

(defn generate-an-bn [k]
  (if (= 0 k)
    '()
    (add-to-end(cons 'a (generate-an-bn(- k 1))) 'b)))



;-------Problem 4--------
(def reverse (fn [l]
               (if (empty? l)
                 '()
                 (cons (last l) (reverse(drop-last l))))))

(defn remove-last-element [l] 
  (reverse(rest(reverse l))))

;-------Problem 5--------
(defn recognize-an-bn [str]
  (if (even? (count str))
    (if(=(generate-an-bn (/ (count str) 2)) str)
      true)
    false))

;-------Problem 6--------
(defn concat-L-A [L A]
  (concat (cons L '()) A))

;-------Problem 8--------
;Let A = a^3, where the elements of A are {a, aa, aaa}
;Now let B = b^3, where the elements of B are {b, bb, bbb}
;Then concat(A,B) = {a, aa, aaa, b, bb, bbb} while:
;concat(B,A) = {b, bb, bbb, a, aa, aaa}
